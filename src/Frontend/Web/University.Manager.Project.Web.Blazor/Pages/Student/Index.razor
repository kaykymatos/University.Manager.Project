@page "/students"
@inject IStudentService service
@inject ICourseService courseService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Students</PageTitle>

<h1>Index</h1>

<p>
    <a href="students/create">Create New</a>
</p>

<MudDataGrid T="StudentViewModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Courses</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="StudentViewModel" />
        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.RegisterCode" Title="Register Code" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x=>courses.FirstOrDefault(y=>y.Id==x.CourseId).Name" Title="Course" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.CreationData" Title="Creation Date" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.UpdatedData" Title="Updated Date" Sortable="true" />

        <MudBlazor.TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="@($"students/edit/{context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Href="@($"students/delete?id={context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Info" Href="@($"students/details?id={context.Item.Id}")" />
            </CellTemplate>
        </MudBlazor.TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="StudentViewModel" />
    </PagerContent>

</MudDataGrid>
<MudBlazor.MudButton Href="students/create"
                     Variant="Variant.Filled"
                     EndIcon="@Icons.Material.Outlined.Create"
                     Color="Color.Primary">
    Create
</MudBlazor.MudButton>

@code {

    private IEnumerable<StudentViewModel> Elements = new List<StudentViewModel>();
    private string _searchString;
    private List<string> _events = new();
    private IEnumerable<CourseViewModel> courses;
    private Func<StudentViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    };


    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        courses = await courseService.FindAll(token);
        Elements = await service.FindAll(token);
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<StudentViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<StudentViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<StudentViewModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}