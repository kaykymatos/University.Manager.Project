@page "/students/delete"
@inject IStudentService service
@inject ICourseService courseService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Students</PageTitle>
<ErrorAlert ServerError="@ServerError" />

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>courseViewModel</h4>
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@student.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@student.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Register Code</dt>
            <dd class="col-sm-10">@student.RegisterCode</dd>
        </dl>
       
        <dl class="row">
            <dt class="col-sm-2">Creation Date</dt>
            <dd class="col-sm-10">@student.CreationData</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Updated Date</dt>
            <dd class="col-sm-10">@student.UpdatedData</dd>
        </dl>
        <EditForm method="post" Model="student" OnValidSubmit="DeleteStudentViewModel" FormName="deleteStudent" Enhance>
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                       ButtonType="ButtonType.Submit" Class="ml-auto">Delete</MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                       ButtonType="ButtonType.Button" Href="/students" Class="ml-auto">Back to List</MudButton>

        </EditForm>
    }
</div>

@code {
    private string ServerError { get; set; }
    StudentViewModel? student;
    private string token;
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await TokenService.GetTokenAsync();
        student = await service.FindById(Id, token);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteStudentViewModel()
    {
        var response = await service.DeleteById(Id, token);
        if (response != null)
        {
            ServerError = $"Erro ao tentar excluir estudante: {response.ErrorMessage}";
        }
        else
        {
            NavigationManager.NavigateTo("/students");
        }

    }
}
