@page "/courses/delete"
@inject ICourseService service
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>courseViewModel</h4>
    <hr />
    @if (courseViewModel is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@courseViewModel.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@courseViewModel.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Workload</dt>
            <dd class="col-sm-10">@courseViewModel.Workload</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Total Value</dt>
            <dd class="col-sm-10">@courseViewModel.TotalValue</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Course Category</dt>
            <dd class="col-sm-10">@courseViewModel.CourseCategory.Name</dd>
        </dl>
        <EditForm method="post" Model="courseViewModel" OnValidSubmit="DeleteCourseViewModel" FormName="delete" Enhance>
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                       ButtonType="ButtonType.Submit" Class="ml-auto">Delete</MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                       ButtonType="ButtonType.Button" Href="/courses" Class="ml-auto">Back to List</MudButton>

        </EditForm>

    }
</div>

@code {
    private string ServerError { get; set; }
    CourseViewModel? courseViewModel;
    private string token;
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        token = await TokenService.GetTokenAsync();
        courseViewModel = await service.FindById(Id, token);

        if (courseViewModel is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCourseViewModel()
    {
        var response = await service.DeleteById(Id, token);
        if (!response)
        {
            ServerError = "Erro ao tentar excluir curso";
        }
        else
        {
            NavigationManager.NavigateTo("/courses");
        }

    }
}
