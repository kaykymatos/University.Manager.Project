@page "/courses/create"
@page "/courses/edit/{Id:int}"
@inject NavigationManager NavigationManager
@inject ICourseService service
@inject ICourseCategoryService courseCategories
<ErrorAlert ServerError="@ServerError" />
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">

            <MudForm @ref="form">
                <MudTextField T="long" @bind-Value="CourseViewModel.Id" hidden />
                <MudTextField T="string" @bind-Value="CourseViewModel.Name" Label="Name" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "Name"))" ErrorText="@(GetFieldErrors("Name").FirstOrDefault())" />
                <MudTextField T="string" @bind-Value="CourseViewModel.Description" Label="Description" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "Description"))" ErrorText="@(GetFieldErrors("Description").FirstOrDefault())" />
                <MudTextField T="float" @bind-Value="CourseViewModel.Workload" Label="Workload" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "Workload"))" ErrorText="@(GetFieldErrors("Workload").FirstOrDefault())" />
                <MudTextField T="decimal" @bind-Value="CourseViewModel.TotalValue" Label="TotalValue" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "TotalValue"))" ErrorText="@(GetFieldErrors("TotalValue").FirstOrDefault())" />
                <MudSelect T="long" Label="Select Course Category" @bind-Value="CourseViewModel.CourseCategoryId">
                    @if (courseCategorieList == null || !courseCategorieList.Any())
                    {
                        <MudSelectItem Value="@((long)0)" Disabled>Loading...</MudSelectItem>
                    }
                    else
                    {
                        @foreach (var category in courseCategorieList)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCourseViewModel" Class="ml-auto">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;

    [Parameter]
    public int Id { get; set; }
    private string ServerError { get; set; }

    public CourseViewModel CourseViewModel { get; set; } = new();
    public string token;

    private IEnumerable<ApiErrorViewModel> errorViewModels = new List<ApiErrorViewModel>();
    private IEnumerable<CourseCategoryViewModel>? courseCategorieList = new List<CourseCategoryViewModel>();

    protected async override Task OnInitializedAsync()
    {
        ServerError = null;
        token = await TokenService.GetTokenAsync();
        courseCategorieList = await courseCategories.FindAll(token);

        if (Id > 0)
            CourseViewModel = await service.FindById(Id, token);
    }

    private IEnumerable<string> GetFieldErrors(string fieldName)
    {
        return errorViewModels
            .Where(error => error.PropertyName == fieldName)
            .Select(error => error.ErrorMessage);
    }

    public async Task AddCourseViewModel()
    {
        ServerError = null;

        IEnumerable<ApiErrorViewModel> response;
        if (CourseViewModel.Id == 0)
            response = await service.Create(CourseViewModel, token);
        else
            response = await service.Update(CourseViewModel, token);

        if (response == null)
        {
            ServerError = "Erro interno no servidor";
        }
        else if (!response.Any())
        {
            NavigationManager.NavigateTo("/courses");
        }
        else
        {
            errorViewModels = response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
            CourseViewModel = await service.FindById(Id, token);
    }
}
