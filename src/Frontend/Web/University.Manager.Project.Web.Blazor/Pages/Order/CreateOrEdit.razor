@page "/orders/create"
@page "/orders/edit/{Id:int}"
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IOrderService service
@inject IStudentService studentService
@inject ErrorService ErrorService
@attribute [Authorize]

<PageTitle>Students</PageTitle>
<ErrorAlert ServerError="@ServerError" />

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">

            <MudForm @ref="form">
                <MudTextField T="long" @bind-Value="order.Id" hidden />
                <MudTextField T="string" @bind-Value="order.Title" Label="Title" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "Title"))" ErrorText="@(ErrorService.GetFieldErrors("Title", errorViewModels))" />
                <MudTextField T="string" @bind-Value="order.Message" Label="Message" Required="true" Error="@(errorViewModels.Any(e => e.PropertyName == "Message"))" ErrorText="@(ErrorService.GetFieldErrors("Message", errorViewModels))" />
                <CustomSelect T="ETypeOrder"
                              U="ETypeOrder"
                              Label="Order Type"
                              @bind-SelectedValue="order.OrderType"
                              Options="Enum.GetValues(typeof(ETypeOrder)).Cast<ETypeOrder>()"
                              GetValue="method => method"
                              GetDisplayText="method => method.ToString()"
                              ErrorService="ErrorService"
                              ErrorFieldName="OrderType"
                              ErrorViewModels="errorViewModels" />

                <div class="mud-input-control mud-input-required mud-input-input-control">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-shrink mud-typography-input">

                            <InputSelect class="mud-input-slot mud-input-root mud-input-root-text" style="width:100%;height:2em !important" @bind-Value="order.UserId">
                                @if (studentList is not null)
                                {
                                    <option value="0" selected>Select</option>

                                    foreach (var item in studentList)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                                else
                                {
                                    <option value="">Loading...</option>
                                }
                            </InputSelect>
                        </div>
                        <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol">User</label>
                    </div>
                    <div class="mud-input-control-helper-container">
                        <span class="mud-input-helper-text mud-input-error">
                            <div class="d-flex">
                                <div class="me-auto">
                                    @ErrorService.GetFieldErrors("UserId", errorViewModels)
                                </div>
                            </div>
                        </span>
                    </div>
                </div>

                <MudFileUpload T="IBrowserFile" MaximumFileCount="1" Accept=".pdf,.png,.jpeg,.jpg" FilesChanged="UploadFiles">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Attachment
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                <label>@fileName</label>

                <div class="d-flex align-center justify-space-between mt-3">
                    <div class="ms-auto">
                        <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                                   ButtonType="ButtonType.Button" Href="/orders" Class="ml-auto">Back to List</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   ButtonType="ButtonType.Button" OnClick="UpdateOrCreateStudent" Class="ml-auto">@(Id > 0 ? "Update" : "Create")</MudButton>
                    </div>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public int Id { get; set; }
    private string ServerError { get; set; }
    private MudForm form;
    private bool formIsValid;
    public OrderViewModel order { get; set; } = new();
    public string token;
    private string fileName { get; set; }
    private IEnumerable<ApiErrorViewModel> errorViewModels = new List<ApiErrorViewModel>();
    private IEnumerable<StudentViewModel>? studentList;
    IList<IBrowserFile> _files = new List<IBrowserFile>();

    private async Task UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        fileName = file.Name;
        var fileBytes = await GetFileBytes(file);
        order.Attachment = Convert.ToBase64String(fileBytes);
    }

    private async Task<byte[]> GetFileBytes(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        using (var stream = file.OpenReadStream())
        {
            await stream.ReadAsync(buffer, 0, (int)file.Size);
        }
        return buffer;
    }

    protected async override Task OnInitializedAsync()
    {
        ServerError = null;
        token = await TokenService.GetTokenAsync();
        studentList = await studentService.FindAll(token);
    }

    private async Task UpdateOrCreateStudent()
    {
        ServerError = null;
        IEnumerable<ApiErrorViewModel> response;
        if (order.Id == 0)
            response = await service.Create(order, token);
        else
            response = await service.Update(order, token);

        if (response == null)
        {
            ServerError = "Erro interno no servidor";
        }
        else if (!response.Any())
        {
            ErrorService.ClearErrors();
            NavigationManager.NavigateTo("/orders");
        }
        else
        {
            errorViewModels = response;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            order = await service.FindById(Id, token);
            if (string.IsNullOrWhiteSpace(order.Title))
                NavigationManager.NavigateTo("notfound");
        }
    }
}
