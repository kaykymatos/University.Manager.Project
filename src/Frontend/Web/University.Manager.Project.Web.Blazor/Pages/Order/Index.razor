@page "/orders"
@inject IOrderService service
@inject IStudentService studentService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Students</PageTitle>

<h1>Index</h1>

<p>
    <a href="orders/create">Create New</a>
</p>
<ErrorAlert ServerError="@ServerError" />

<MudDataGrid T="OrderViewModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            Students
            <br>
            @if (selectedItens.Any())
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error"
                           ButtonType="ButtonType.Submit" Class="ml-auto" OnClick="DeteleMultiple">Delete</MudButton>
            }
        </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <SelectColumn T="OrderViewModel" />
        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.Title" Title="Title" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.Message" Title="Message" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.OrderType" Title="Order Type" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x=>students.FirstOrDefault(y=>y.Id==x.UserId).Name" Title="Course" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.Attachment" Title="Attachment" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.UpdatedData" Title="UpdatedData" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.CreationData" Title="CreationData" Sortable="true" />

        <MudBlazor.TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="@($"orders/edit/{context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Href="@($"orders/delete?id={context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Info" Href="@($"orders/details?id={context.Item.Id}")" />
            </CellTemplate>
        </MudBlazor.TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="OrderViewModel" />
    </PagerContent>

</MudDataGrid>
<MudBlazor.MudButton Href="orders/create"
                     Variant="Variant.Filled"
                     EndIcon="@Icons.Material.Outlined.Create"
                     Color="Color.Primary">
    Create
</MudBlazor.MudButton>

@code {

    private IEnumerable<OrderViewModel> Elements = new List<OrderViewModel>();
    private string _searchString;
    private List<string> _events = new();
    private IEnumerable<StudentViewModel> students;
    private Func<OrderViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;


        return false;
    };


    protected override async Task OnInitializedAsync()
    {
        var token = await TokenService.GetTokenAsync();
        students = await studentService.FindAll(token);
        Elements = await service.FindAll(token);
    }
    private string ServerError { get; set; }
    public HashSet<OrderViewModel> selectedItens = new HashSet<OrderViewModel>();

    async Task DeteleMultiple()
    {
        var token = await TokenService.GetTokenAsync();

        var deleteOrders = selectedItens.Select(x => x.Id).ToList();
        var deletMulti = await service.DeletMultiple(deleteOrders, token);
        if (!deletMulti)
        {
            ServerError = "Erro al tentar deletar vários registros";
        }
        else
        {
            Elements = Elements.Where(x => !deleteOrders.Any(y => y == x.Id)).ToList();
        }
    }
    
    void RowClicked(DataGridRowClickEventArgs<OrderViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<OrderViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<OrderViewModel> items)
    {
        selectedItens = new HashSet<OrderViewModel>();

        foreach (var item in items)
        {
            selectedItens.Add(item);
        }
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}