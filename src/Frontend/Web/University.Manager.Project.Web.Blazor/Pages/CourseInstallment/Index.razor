@page "/courseInstallments"
@inject ICourseInstallmentService service
@inject IStudentService studentService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Course installments</PageTitle>

<h1>Index</h1>

<p>
    <a href="courseInstallments/create">Create New</a>
</p>
<ErrorAlert ServerError="@ServerError" />

<MudDataGrid T="CourseInstallmentViewModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            Course Installments
            <br>
            @if (selectedItens.Any())
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error"
                           ButtonType="ButtonType.Submit" Class="ml-auto" OnClick="DeteleMultiple">Delete</MudButton>
            }
        </MudText>

        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>

    <Columns >

        <SelectColumn T="CourseInstallmentViewModel" />
        <MudBlazor.PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.PaymentMethod" Title="Payment Method" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.InstallmentPrice" Title="Installment Price" Sortable="true" />

        <MudBlazor.TemplateColumn Title="Student">
            <CellTemplate>
                @{
                    var foudStudent = students.FirstOrDefault(x => x.Id == context.Item.StudentId);
                    if (foudStudent is null)
                    {
                        <span></span>
                    }
                    else
                    {
                        <span>@foudStudent.Name</span>
                    }
                }
            </CellTemplate>
        </MudBlazor.TemplateColumn>
        <MudBlazor.PropertyColumn Property="x => x.DueDate" Title="Due Date" Sortable="true" />
        <MudBlazor.PropertyColumn Property="x => x.PaymentDate" Title="Payment Date" Sortable="true" />

        <MudBlazor.TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Href="@($"courseInstallments/edit/{context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Href="@($"courseInstallments/delete?id={context.Item.Id}")" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Info" Href="@($"courseInstallments/details?id={context.Item.Id}")" />
            </CellTemplate>
        </MudBlazor.TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="CourseInstallmentViewModel" />
    </PagerContent>

</MudDataGrid>
<MudBlazor.MudButton Href="courseInstallments/create"
                     Variant="Variant.Filled"
                     EndIcon="@Icons.Material.Outlined.Create"
                     Color="Color.Primary">
    Create
</MudBlazor.MudButton>

@code {

    private IEnumerable<CourseInstallmentViewModel> Elements = new List<CourseInstallmentViewModel>();
    private IEnumerable<StudentViewModel> students;
    private string _searchString;
    private List<string> _events = new();
    private string ServerError { get; set; }
    private Func<CourseInstallmentViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;


        return false;
    };


    protected override async Task OnInitializedAsync()
    {
        ServerError = null;
        var token = await TokenService.GetTokenAsync();
        students = await studentService.FindAll(token);
        Elements = await service.FindAll(token);
    }
    public HashSet<CourseInstallmentViewModel> selectedItens = new HashSet<CourseInstallmentViewModel>();

    async Task DeteleMultiple()
    {
        var token = await TokenService.GetTokenAsync();

        var deleteStudents = selectedItens.Select(x => x.Id).ToList();
        var deletMulti = await service.DeletMultiple(deleteStudents, token);
        if (deletMulti != null)
        {
            ServerError = $"Erro al tentar deletar vários registros: {deletMulti.ErrorMessage}";
        }
        else
        {
            Elements = Elements.Where(x => !deleteStudents.Any(y => y == x.Id)).ToList();
        }
    }
    
    void RowClicked(DataGridRowClickEventArgs<CourseInstallmentViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CourseInstallmentViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CourseInstallmentViewModel> items)
    {
        selectedItens = new HashSet<CourseInstallmentViewModel>();

        foreach (var item in items)
        {
            selectedItens.Add(item);
        }
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}