@page "/courseInstallments/delete"
@inject ICourseInstallmentService service
@inject IStudentService studentService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Course installments</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>courseViewModel</h4>
    <hr />
    @if (courseInstallment is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">PaymentMethod</dt>
            <dd class="col-sm-10">@courseInstallment.PaymentMethod</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">InstallmentPrice</dt>
            <dd class="col-sm-10">@courseInstallment.InstallmentPrice</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Student</dt>
            @{
                var foudStudent = students.FirstOrDefault(x => x.Id == courseInstallment.StudentId);
                if (foudStudent is null)
                {
                    <dd class="col-sm-10"></dd>
                }
                else
                {
                    <dd class="col-sm-10">@foudStudent.Name</dd>
                }
            }
 </dl>
       
        <dl class="row">
            <dt class="col-sm-2">DueDate</dt>
            <dd class="col-sm-10">@courseInstallment.DueDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PaymentDate</dt>
            <dd class="col-sm-10">@courseInstallment.PaymentDate</dd>
        </dl>
        <EditForm method="post" Model="courseInstallment" OnValidSubmit="DeleteCourseInstallmentViewModel" FormName="deleteStudent" Enhance>
            <MudButton Variant="Variant.Filled" Color="Color.Error"
                       ButtonType="ButtonType.Submit" Class="ml-auto">Delete</MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Transparent"
                       ButtonType="ButtonType.Button" Href="/courseInstallments" Class="ml-auto">Back to List</MudButton>

        </EditForm>
    }
</div>

@code {
    private string ServerError { get; set; }
    CourseInstallmentViewModel? courseInstallment;
    private string token;
    [SupplyParameterFromQuery]
    public int Id { get; set; }
    private IEnumerable<StudentViewModel> students;

    protected override async Task OnInitializedAsync()
    {
        token = await TokenService.GetTokenAsync();
        students = await studentService.FindAll(token);
        courseInstallment = await service.FindById(Id, token);

        if (courseInstallment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCourseInstallmentViewModel()
    {
        var response = await service.DeleteById(Id, token);
        if (!response)
        {
            ServerError = "Erro ao tentar excluir curso";
        }
        else
        {
            NavigationManager.NavigateTo("/courseInstallments");
        }

    }
}
